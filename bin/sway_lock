#!/usr/bin/env python3

import asyncio
import fnmatch
import json
import os

def probably_sway_socket():
    for file in os.listdir(os.getenv('XDG_RUNTIME_DIR')):
        if fnmatch.fnmatch(file, 'sway*sock'):
            return file

async def run_shell(cmd):
    job = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )

    return await job.communicate()

async def main():
    # Get the environment into a known-sane state. These envvars are missing when called
    # from a systemd unit file. Realistically, this should be set in the service file,
    # but for now, hack around it
    uid = os.geteuid()
    user = os.getenv('USER')

    if not os.getenv('XDG_RUNTIME_DIR'):
        os.environ['XDG_RUNTIME_DIR'] = f'/run/user/{uid}'

    if not os.getenv('SWAYSOCK'):
        os.environ['SWAYSOCK'] = probably_sway_socket()

    proc = await asyncio.subprocess.create_subprocess_exec(
        '/usr/bin/swaymsg', '-t', 'get_outputs',
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )

    stdout, _ = await proc.communicate()

    displays = [x['name'] for x in json.loads(stdout)]

    await asyncio.gather(*[
        run_shell(f'grim -o {display} - | convert -blur 0x6 - /home/{user}/.lockscreen.{display}.png')
        for display in displays
    ])

    swaylock_display_args = []

    for display in displays:
        swaylock_display_args.append('-i')
        swaylock_display_args.append(f'{display}:/home/{user}/.lockscreen.{display}.png')

    proc = await asyncio.subprocess.create_subprocess_exec(
        '/usr/bin/swaylock', *swaylock_display_args,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )

    stdout, _ = await proc.communicate()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
